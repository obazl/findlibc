load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")

load("@makeheaders//rules:makeheaders.bzl", "makeheaders")
load("@lemon//src:BUILD.bzl", "lemon")

load("//config/cc:CONFIG.bzl", "BASE_COPTS", "PROFILE")

# TOOLCHAINS = ["//:module_profiles"]

# exports_files(glob([
#     # "ansi_colors.h",
#     "findlibc_debug.c",
#     # "macros_debug.h", "macros_ndebug.h",
# ]))

################################################################
cc_library(
    name = "findlibc",
    # alwayslink = True,
    # srcs = ["findlibc.c"],
    hdrs = ["findlibc.h"],
    includes = ["."],
    implementation_deps = [
        "//lib/parser:meta_parser",
        "//lib/map_reduce:findlib_map_reduce",
        "@liblogc//lib:logc",
        "@semverc//lib:semverc",
        "@uthash//lib:uthash",
    ],
    copts = BASE_COPTS + select({
        "@makeheaders//compilation_mode:fastbuild": [],
        # else findlib.c will be empty, so:
        "//conditions:default": ["-Wno-empty-translation-unit"]
    }),
    linkopts = select({
        "@platforms//os:linux": [
            "-Wl,--fatal-warnings",
            "-Wl,-export-dynamic"
        ],
        "@platforms//os:macos": ["-Wl,-export_dynamic"],
        "//conditions:default": [] #FIXME
    }),
    defines    = PROFILE,
    visibility = ["//visibility:public"]
)

makeheaders(
    name = "mkhdrs_export",
    out ="findlibc.h",
    export_interface = True,
    hdrs_srcs = [
        ":findlibc.c",
        "//lib/lexer:meta_lexis.c",
        "//lib/parser:meta_syntaxis.c",
        "//lib/parser:meta_parser.c",
        "//lib/parser:meta_entries.c",
        "//lib/parser:meta_flags.c",
        "//lib/parser:meta_packages.c",
        "//lib/parser:meta_properties.c",
        "//lib/parser:meta_settings.c",
        "//lib/parser:meta_values.c",
        "//lib/map_reduce:findlib_map_reduce.c",
    ] + select({
        "@makeheaders//compilation_mode:fastbuild": [
            "//lib/parser:meta_debugging.c",
        ],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

################################################################
## enable meta ast debugging: --//bootstrap:ast-dump
bool_flag(name = "ast-dump", build_setting_default = 0)
config_setting(name = "ast-dump-enabled",
               flag_values = {":ast-dump": "True"})
config_setting(name = "ast-dump-disabled",
               flag_values = {":ast-dump": "False"})

## enable meta ast debugging: --//bootstrap:ast-trace
bool_flag(name = "ast-trace", build_setting_default = 0)
config_setting(name = "ast-trace-enabled",
               flag_values = {":ast-trace": "True"})
config_setting(name = "ast-trace-disabled",
               flag_values = {":ast-trace": "False"})

## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug-enabled", flag_values = {":yydebug": "True"})
config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace-enabled", flag_values = {":yytrace": "True"})
config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")
config_setting(name = "yydebug-fpf",
               flag_values = {":yydebug-rules": "fpf"})
config_setting(name = "yydebug-fvf",
               flag_values = {":yydebug-rules": "fvf"})
config_setting(name = "yydebug-filter",
               flag_values = {":yydebug-rules": "filter"})
config_setting(name = "yydebug-build-filter",
               flag_values = {":yydebug-rules": "build-filter"})

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
config_setting(name = "lexdebug-fpf",
               flag_values = {":lexdebug-rules": "fpf"})
config_setting(name = "lexdebug-fvf",
               flag_values = {":lexdebug-rules": "fvf"})
config_setting(name = "lexdebug-filter",
               flag_values = {":lexdebug-rules": "filter"})
config_setting(name = "lexdebug-build-filter",
               flag_values = {":lexdebug-rules": "build-filter"})

