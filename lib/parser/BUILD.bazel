load("@rules_cc//cc:defs.bzl", "cc_library")

load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag", "string_setting")

load("@makeheaders//rules:makeheaders.bzl", "makeheaders")

load("//config/cc:CONFIG.bzl",
     COPTS   = "BASE_COPTS",
     "PROFILE",
     "define_module_version")

exports_files(glob(["*.c"]))

######################################################
## dev flag tells Bazel to regenerate the parser
bool_flag(name = "dev", build_setting_default = False)
config_setting(name = "dev?", flag_values = {":dev": "True"})

################################################################
cc_library(
    name = "meta_parser",
    srcs = [
        "meta_parser.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        ":mkhdrs"
    ] + select({
        ":dev?": [
            "//lib/parser/syntaxis:meta_syntaxis.c",
        ],
        "//conditions:default": [
            "meta_syntaxis.c",
            "meta_syntaxis.h",
        ],
    }) + select({
        ":dev?": [
            "meta_debugging.c",
        ],
        "//conditions:default": []
    }),
    implementation_deps = [
        "@liblogc//lib:logc",
        "@semverc//lib:semverc",
        "@uthash//lib:uthash",
        "//lib/lexer:meta_lexer",
    ],
    includes = ["."],
    copts = COPTS + [
        "-I$(GENDIR)/lib/parser"
    ],
    defines = PROFILE + select({
        ## for strdup, strndup:
        "@platforms//os:linux": ["_POSIX_C_SOURCE=200809L"],
        "//conditions:default": []
    }),
    local_defines = define_module_version() + select({
        ":yydebug?": ["YYDEBUG"], "//conditions:default":   []
    }) + select({
        ":yytrace?": ["YYTRACE"], "//conditions:default":   []
    }),
    ## other macros used in meta_*.c files:
    # DEBUG_ENTRIES, DEBUG_FLAGS, DEBUG_PACKAGES
    # DEBUG_PROPERTIES, DEBUG_SETTINGS, DEBUG_VALUES
    # DEBUG_LEX
    visibility = [
        "//lib:__pkg__",
        "//test:__subpackages__"
    ]
)

###########
# cc_library(
#     name = "meta_syntaxis",
#     alwayslink = True,
#     srcs = select({
#         ":dev?": [
#             "//lib/parser/syntaxis:meta_syntaxis.c",
#             ":mkhdrs"
#         ],
#         "//conditions:default": [
#             "meta_syntaxis.c",
#             "meta_syntaxis.h",
#         ],
#     }) + select({
#         ":dev?": [
#             "meta_debugging.c",
#         ],
#         "//conditions:default": []
#     }),
#     includes = ["."],
#     deps = [ # DEPS + [
#         "@liblogc//lib:logc",
#         "@semverc//lib:semverc",
#         "@uthash//lib:uthash",
#     ],
#     copts = COPTS + [
#         "-Wno-unused-parameter",
#         "-Wno-unused-variable",
#         "-Wno-visibility",

#         ## for mkhdrs output:
#         "-I$(GENDIR)/lib/parser"
#     ],
#     defines = PROFILE + select({
#         ## for strdup, strndup:
#         "@platforms//os:linux": ["_POSIX_C_SOURCE=200809L"],
#         "//conditions:default": []
#     }),
#     local_defines = select({
#         ":yydebug?": ["YYDEBUG", "TRACING"],
#         "//conditions:default":   []
#     }) + select({
#         ":yytrace?": ["YYTRACE"],
#         "//conditions:default":   []
#     }),
#     visibility = ["//visibility:public"]
# )

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "meta_parser.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        # "utils.c",
    ] + select({
        ":dev?": [
            "//lib/parser/syntaxis:meta_syntaxis.c",
        ],
        "//conditions:default": ["meta_syntaxis.c"],
    }) + select({
        ":dev?": ["meta_debugging.c"],
        "//conditions:default": []
    }),
    additional_srcs = [
    ] + select({
        "//lib/lexer:dev?": [
            "//lib/lexer/lexis:meta_lexis.c",
        ],
        "//conditions:default": [
            "//lib/lexer:meta_lexis.c",
        ]
    }) + ["@liblogc//macros:ansi_colors.h"] + select({
        "@obazl_tools_cc//profile:dev?": [
            "@liblogc//macros:logging_debug.h"
        ],
        "//conditions:default": [
            "@liblogc//macros:logging_ndebug.h"
        ]
    })
)

################################################################
## enable meta ast debugging: --//bootstrap:ast-dump
bool_flag(name = "ast-dump", build_setting_default = 0)
config_setting(name = "ast-dump-enabled",
               flag_values = {":ast-dump": "True"})
config_setting(name = "ast-dump-disabled",
               flag_values = {":ast-dump": "False"})

## enable meta ast debugging: --//bootstrap:ast-trace
bool_flag(name = "ast-trace", build_setting_default = 0)
config_setting(name = "ast-trace-enabled",
               flag_values = {":ast-trace": "True"})
config_setting(name = "ast-trace-disabled",
               flag_values = {":ast-trace": "False"})

## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug?", flag_values = {":yydebug": "True"})
# config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace?", flag_values = {":yytrace": "True"})
# config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
