load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")
# load("@bazel_skylib//rules:copy_file.bzl", "copy_file")

load("@makeheaders//src:RULES.bzl", "makeheaders")
load("@lemon//src:BUILD.bzl", "lemon")

load("//config/cc:CONFIG.bzl",
     "BASE_COPTS",
     "BASE_DEFINES")

COPTS = BASE_COPTS
DEFINES = BASE_DEFINES + ["TRACING"]

exports_files(glob([
    "ansi_colors.h",
    "trace_dev.h", "trace_prod.h",
]))

################################################################
cc_library(
    name = "findlibc",
    # alwayslink = True,
    srcs = [ ],
    hdrs = ["findlibc.h"],
    deps = [
        # "//src/lexer:meta_lexer",
        "//src/parser:meta_parser",
        "//src/map_reduce:findlib_map_reduce",
        "@liblogc//src:logc",
        "@uthash//src:uthash",
        # "//src/lexer:meta_lexer",
        # "//src/parser:meta_parser",
    ],
    visibility = ["//visibility:public"]
)

#     # data  = [
#     #     "//coswitch/templates:ocaml_bigarray.BUILD",
#     #     "//coswitch/templates:ocaml_c_api.BUILD",
#     #     "//coswitch/templates:ocaml_compiler-libs.BUILD",
#     #     "//coswitch/templates/compiler_libs:bytecomp.BUILD",
#     #     "//coswitch/templates/compiler_libs:common.BUILD",
#     #     "//coswitch/templates/compiler_libs:optcomp.BUILD",
#     #     "//coswitch/templates/compiler_libs:toplevel.BUILD",
#     #     "//coswitch/templates/compiler_libs:native_toplevel.BUILD",
#     #     "//coswitch/templates:ocaml_dynlink.BUILD",
#     #     "//coswitch/templates:ocaml_num.BUILD",
#     #     "//coswitch/templates:ocaml_ocamldoc.BUILD",
#     #     "//coswitch/templates:ocaml_runtime.BUILD",
#     #     "//coswitch/templates:ocaml_stdlib.BUILD",
#     #     "//coswitch/templates:ocaml_str.BUILD",

#     #     "//coswitch/templates/platforms:BUILD.bazel",
#     #     "//coswitch/templates/platforms/build:BUILD.bazel",
#     #     "//coswitch/templates/platforms/target:BUILD.bazel",

#     #     "//coswitch/templates:toolchain/adapters/local.BUILD",
#     #     "//coswitch/templates:toolchain/adapters/local.BUILD.mustache",
#     #     "//coswitch/templates:toolchain/adapters/linux/x86_64.BUILD",
#     #     "//coswitch/templates:toolchain/adapters/linux/arm.BUILD",
#     #     "//coswitch/templates:toolchain/adapters/macos/x86_64.BUILD",
#     #     "//coswitch/templates:toolchain/adapters/macos/arm.BUILD",
#     #     "//coswitch/templates:toolchain/profiles/profiles.BUILD",
#     #     "//coswitch/templates:toolchain/selectors/local.BUILD",
#     #     "//coswitch/templates:toolchain/selectors/linux/x86_64.BUILD",
#     #     "//coswitch/templates:toolchain/selectors/linux/arm.BUILD",
#     #     "//coswitch/templates:toolchain/selectors/macos/arm.BUILD",
#     #     "//coswitch/templates:toolchain/selectors/macos/x86_64.BUILD",
#     #     # "//coswitch/templates/host/bazel:BUILD.bazel",
#     #     # "//coswitch/templates/host/build:BUILD.bazel",
#     #     # "//coswitch/templates/host/target:BUILD.bazel",
#     #     "//coswitch/templates:ocaml_threads.BUILD",
#     #     "//coswitch/templates:ocaml_unix.BUILD",
#     # ],
#     # ] + select({
#     #     "//config/compilation_mode:dbg?": ["//src:debug"],
#     #     "//conditions:default": []
#     # }),
#     visibility = ["//visibility:public"]
# )

makeheaders(
    name = "mkhdrs_export",
    out ="findlibc.h",
    export_interface = True,
    hdrs_srcs = [
        "//src/lexer:meta_lexis.c",
        "//src/parser:meta_syntaxis.c",
        "//src/parser:meta_parser.c",
        "//src/parser:meta_entries.c",
        "//src/parser:meta_flags.c",
        "//src/parser:meta_packages.c",
        "//src/parser:meta_properties.c",
        "//src/parser:meta_settings.c",
        "//src/parser:meta_values.c",
        "//src/map_reduce:findlib_map_reduce.c",
    ] + select({
        # "//config/profile:dev?": [
        "@cc_config//profile:dev?": [
            "//src/parser:meta_debugging.c",
        ],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

################################################################
## enable meta ast debugging: --//bootstrap:ast-dump
bool_flag(name = "ast-dump", build_setting_default = 0)
config_setting(name = "ast-dump-enabled",
               flag_values = {":ast-dump": "True"})
config_setting(name = "ast-dump-disabled",
               flag_values = {":ast-dump": "False"})

## enable meta ast debugging: --//bootstrap:ast-trace
bool_flag(name = "ast-trace", build_setting_default = 0)
config_setting(name = "ast-trace-enabled",
               flag_values = {":ast-trace": "True"})
config_setting(name = "ast-trace-disabled",
               flag_values = {":ast-trace": "False"})

## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug-enabled", flag_values = {":yydebug": "True"})
config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace-enabled", flag_values = {":yytrace": "True"})
config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")
config_setting(name = "yydebug-fpf",
               flag_values = {":yydebug-rules": "fpf"})
config_setting(name = "yydebug-fvf",
               flag_values = {":yydebug-rules": "fvf"})
config_setting(name = "yydebug-filter",
               flag_values = {":yydebug-rules": "filter"})
config_setting(name = "yydebug-build-filter",
               flag_values = {":yydebug-rules": "build-filter"})

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
config_setting(name = "lexdebug-fpf",
               flag_values = {":lexdebug-rules": "fpf"})
config_setting(name = "lexdebug-fvf",
               flag_values = {":lexdebug-rules": "fvf"})
config_setting(name = "lexdebug-filter",
               flag_values = {":lexdebug-rules": "filter"})
config_setting(name = "lexdebug-build-filter",
               flag_values = {":lexdebug-rules": "build-filter"})

