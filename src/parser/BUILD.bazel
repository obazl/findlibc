load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag", "string_setting")

load("@makeheaders//src:RULES.bzl", "makeheaders")
load("@lemon//src:BUILD.bzl", "lemon")

load("//config/cc:CONFIG.bzl",
     COPTS   = "BASE_COPTS",
     DEFINES = "BASE_DEFINES")

TOOLCHAINS = ["//:repo_paths"]

exports_files(
    glob(
        ["*.c"],
        # meta_syntaxis.c already exported by lemon
        exclude = ["meta_syntaxis.c"]
    )
)

################################################################
cc_library(
    name = "meta_parser",
    # alwayslink = True,
    srcs = [
        "meta_parser.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        ":meta_syntaxis",
        ":mkhdrs",
    ],
    deps = [
        "@liblogc//src:logc",
        "@semverc//src:semverc",
        "@uthash//src:uthash",
        "//src/lexer:meta_lexer",
    ],
    copts = COPTS + [
        "-I$(@liblogc)/src",
        "-I$(@semverc)/src",
        "-I$(@uthash)/src",
        "-I$(GENDIR)/$(@)/src/parser",
    ],
    defines = DEFINES + select({
        ":yydebug?": ["YYDEBUG"], "//conditions:default":   []
    }) + select({
        ":yytrace?": ["YYTRACE"], "//conditions:default":   []
    }),
    ## other macros used in meta_*.c files:
    # DEBUG_ENTRIES, DEBUG_FLAGS, DEBUG_PACKAGES
    # DEBUG_PROPERTIES, DEBUG_SETTINGS, DEBUG_VALUES
    # DEBUG_LEX
    toolchains = TOOLCHAINS,
    visibility = [
        "//src:__pkg__",
        "//test:__subpackages__"
    ]
)

###########
cc_library(
    name = "meta_syntaxis",
    alwayslink = True,
    srcs = [
        "meta_syntaxis.c",
        ":mkhdrs",
        # ":meta_syntaxis_h",
    ] + select({
        "//config/compilation_mode:fastbuild?": [
        # "@cc_config//profile:dev?": [
            "meta_debugging.c",
        ],
        "//conditions:default": []
    }),
    deps = [
        "@liblogc//src:logc",
        "@semverc//src:semverc",
        "@uthash//src:uthash",
    ],
    copts = COPTS + [
        "-Wno-unused-parameter",
        "-Wno-unused-variable",
        "-Wno-visibility",

        "-I.", # do not delete
        "-I$(@liblogc)/src",
        "-I$(@semverc)/src",
        "-I$(@uthash)/src",

        ## NOTE: generated meta_syntaxis.c includes header with
        ## full bazel path, e.g.
        ## #include "bazel-out/darwin_arm64-fastbuild/bin/<segs>/src/parser/meta_syntaxis.h"
        ## where <segs> will be null (if building w/in findlibc repo)
        ## or external/findlibc~<version> if building as an external repo
        ## so we always need this:
        "-I.",

        ## for mkhdrs output:
        "-I$(GENDIR)/$(@)/src/parser"
    ],
    defines = DEFINES + select({
        ":yydebug?": ["YYDEBUG", "TRACING"],
        "//conditions:default":   []
    }) + select({
        ":yytrace?": ["YYTRACE"],
        "//conditions:default":   []
    }),
    toolchains = TOOLCHAINS,
    visibility = ["//test:__subpackages__"]
)

########
lemon(
    name = "gen_meta_syntaxis",
    yy   = "meta_syntaxis.y",
    outs = ["meta_syntaxis.c","meta_syntaxis.out"],
    defines = select({
        ":yydebug?": ["YYDEBUG", "TRACING"],
        "//conditions:default":   []
    }) + select({
        ":yytrace?": ["YYTRACE"],
        "//conditions:default":   []
    }),
    visibility = [
        "//src:__subpackages__",
        "//test:__pkg__"
    ]
)

################################################################

makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "meta_parser.c",
        "meta_syntaxis.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        # "utils.c",
    ] + select({
        "//config/compilation_mode:fastbuild?": [
            "meta_debugging.c"],
        #"@cc_config//profile:dev?": ["meta_debugging.c"],
        "//conditions:default": []
    }),
    additional_srcs = [
        # no header outputs for these
        "//src/lexer:meta_lexis.c",
        "//src:ansi_colors.h",
    ] + select({
        "//config/compilation_mode:fastbuild?": [
            "//src:macros_debug.h"
        ],
        "//conditions:default": ["//src:macros_ndebug.h"]
    }),
)

# makeheaders(
#     name = "meta_syntaxis_h",
#     hdrs_srcs = [
#         "meta_syntaxis.c",
#     ],
#     additional_srcs = [
#         # no header outputs for these
#         "//src/lexer:meta_lexis.c",
#         "meta_entries.c",
#         "meta_packages.c",
#         "meta_values.c",
#         "//src:ansi_colors.h",
#     ] + select({
#         # "//config/profile:dev?": [
#         # "@cc_config//profile:dev?": [
#         "@cc_config//trace:trace?": [
#             "//src:ansi_colors.h", "//src:trace_dev.h"
#         ],
#         "//conditions:default": ["//src:trace_prod.h"]
#     }),
# )

################################################################
## enable meta ast debugging: --//bootstrap:ast-dump
bool_flag(name = "ast-dump", build_setting_default = 0)
config_setting(name = "ast-dump-enabled",
               flag_values = {":ast-dump": "True"})
config_setting(name = "ast-dump-disabled",
               flag_values = {":ast-dump": "False"})

## enable meta ast debugging: --//bootstrap:ast-trace
bool_flag(name = "ast-trace", build_setting_default = 0)
config_setting(name = "ast-trace-enabled",
               flag_values = {":ast-trace": "True"})
config_setting(name = "ast-trace-disabled",
               flag_values = {":ast-trace": "False"})

## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug?", flag_values = {":yydebug": "True"})
# config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace?", flag_values = {":yytrace": "True"})
# config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")
config_setting(name = "yydebug-fpf",
               flag_values = {":yydebug-rules": "fpf"})
config_setting(name = "yydebug-fvf",
               flag_values = {":yydebug-rules": "fvf"})
config_setting(name = "yydebug-filter",
               flag_values = {":yydebug-rules": "filter"})
config_setting(name = "yydebug-build-filter",
               flag_values = {":yydebug-rules": "build-filter"})

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
config_setting(name = "lexdebug-fpf",
               flag_values = {":lexdebug-rules": "fpf"})
config_setting(name = "lexdebug-fvf",
               flag_values = {":lexdebug-rules": "fvf"})
config_setting(name = "lexdebug-filter",
               flag_values = {":lexdebug-rules": "filter"})
config_setting(name = "lexdebug-build-filter",
               flag_values = {":lexdebug-rules": "build-filter"})
