load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")
# load("@bazel_skylib//rules:copy_file.bzl", "copy_file")

load("@makeheaders//src:BUILD.bzl", "makeheaders")
load("@lemon//src:BUILD.bzl", "lemon")

load("//:BUILD.bzl",
     "LIBFINDLIB_VERSION",
     "LIBLOG_CC_VERSION",
     "UTHASH_VERSION")
load("//config/cc:BUILD.bzl",
     "BASE_COPTS",
     "BASE_DEFINES")

COPTS = BASE_COPTS
DEFINES = BASE_DEFINES # + ["TRACING"]

csrcs = glob(["*.c"])
exports_files(
    glob(
        ["*.c"],
        # meta_syntaxis.c already exported by lemon
        exclude = ["meta_syntaxis.c"]
    )
)

################################################################
cc_library(
    name = "meta_parser",
    # alwayslink = True,
    srcs = [
        "meta_parser.c",
        ":mkhdrs",
        # "meta_parser.h",
    ],
    deps = [
        "@liblog_cc//src:logc",
        "@uthash//src:uthash",
        "//src/lexer:meta_lexer",
        ":meta_syntaxis"
    ],
    copts = COPTS + [
        "-Wno-unused-parameter",
        "-Wno-unused-variable",
        "-Wno-visibility",

        ## NOTE: generated meta_syntaxis.c includes header with full
        ## bazel path, e.g.
        ## #include "bazel-out/darwin-fastbuild/bin/external/mibl/src/findlib/meta_syntaxis.h"
        ## so we always need '-I .'
        "-I.",
        "-Isrc",

        "-I$(GENDIR)/src/parser",
        "-I$(GENDIR)/external/libfindlib~{}/src/parser".format(
            LIBFINDLIB_VERSION),

        "-Iexternal/liblog_cc~{}/src".format(LIBLOG_CC_VERSION),

        "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),
        # "-Ivendored/uthash",
        # "-Iexternal/mibl/vendored/uthash",
    ],
    defines = DEFINES + select({
        ":yydebug?": ["YYDEBUG", "TRACING"],
        "//conditions:default":   []
    }) + select({
        ":yytrace?": ["YYTRACE"],
        "//conditions:default":   []
    }),
    visibility = [
        "//src:__pkg__",
        "//test:__subpackages__"
    ]
)

###########
cc_library(
    name = "meta_syntaxis",
    # alwayslink = True,
    srcs = [
        "meta_syntaxis.c",

        "meta_entries.c",
        "meta_flags.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        "utils.c",
        ":mkhdrs",
    ] + select({
        "//config/profile:dev?": [
            "debug_meta.c", # "debug_meta.h"
        ],
        "//conditions:default": []
    }),
    deps = [
        "@liblog_cc//src:logc",
        "@uthash//src:uthash",
    ],
    copts = COPTS + [
        "-Wno-unused-parameter",
        "-Wno-unused-variable",
        "-Wno-visibility",

        ## NOTE: generated meta_syntaxis.c includes header with full
        ## bazel path, e.g.
        ## #include "bazel-out/darwin-fastbuild/bin/external/mibl/src/findlib/meta_syntaxis.h"
        ## so we always need '-I .'
        "-I.",
        "-Isrc",

        "-I$(GENDIR)/src/parser",
        "-I$(GENDIR)/external/libfindlib~{}/src/parser".format(
            LIBFINDLIB_VERSION),

        "-Iexternal/liblog_cc~{}/src".format(LIBLOG_CC_VERSION),

        "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),
        # "-Ivendored/uthash",
        # "-Iexternal/mibl/vendored/uthash",
    ],
    defines = DEFINES + select({
        ":yydebug?": ["YYDEBUG", "TRACING"],
        "//conditions:default":   []
    }) + select({
        ":yytrace?": ["YYTRACE"],
        "//conditions:default":   []
    }),
    visibility = ["//test:__subpackages__"]
)

########
lemon(
    name = "gen_meta_syntaxis",
    yy   = "meta_syntaxis.y",
    outs = ["meta_syntaxis.c","meta_syntaxis.out"],
    defines = select({
        ":yydebug?": ["YYDEBUG", "TRACING"],
        "//conditions:default":   []
    }) + select({
        ":yytrace?": ["YYTRACE"],
        "//conditions:default":   []
    }),
    visibility = [
        "//src:__subpackages__",
        "//test:__pkg__"
    ]
)

################################################################
makeheaders(
    name = "mkhdrs",
    srcs = [
        "meta_parser.c",
        "meta_syntaxis.c",
        "meta_entries.c",
        "meta_flags.c",
        "meta_packages.c",
        "meta_properties.c",
        "meta_settings.c",
        "meta_values.c",
        "utils.c",
        # "debug_meta.c"
    ] + select({
        "//config/profile:dev?": ["debug_meta.c"],
        "//conditions:default": []
    }),
    additional_srcs = [
        # no header outputs for these
        "//src/lexer:meta_lexis.c",
    ],
)

################################################################
## enable meta ast debugging: --//bootstrap:ast-dump
bool_flag(name = "ast-dump", build_setting_default = 0)
config_setting(name = "ast-dump-enabled",
               flag_values = {":ast-dump": "True"})
config_setting(name = "ast-dump-disabled",
               flag_values = {":ast-dump": "False"})

## enable meta ast debugging: --//bootstrap:ast-trace
bool_flag(name = "ast-trace", build_setting_default = 0)
config_setting(name = "ast-trace-enabled",
               flag_values = {":ast-trace": "True"})
config_setting(name = "ast-trace-disabled",
               flag_values = {":ast-trace": "False"})

## enable parser debugging: --//bootstrap:yydebug
bool_flag(name = "yydebug", build_setting_default = 0)
config_setting(name = "yydebug?", flag_values = {":yydebug": "True"})
# config_setting(name = "yydebug-disabled", flag_values = {":yydebug": "False"})
bool_flag(name = "yydebug-exit-on-error", build_setting_default = 0)
config_setting(name = "yydebug-exit-on-error-enabled",
               flag_values = {":yydebug-exit-on-error": "True"})

bool_flag(name = "yytrace", build_setting_default = 0)
config_setting(name = "yytrace?", flag_values = {":yytrace": "True"})
# config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

## debug parse rules
string_flag(name = "yydebug-rules", build_setting_default = "")
config_setting(name = "yydebug-fpf",
               flag_values = {":yydebug-rules": "fpf"})
config_setting(name = "yydebug-fvf",
               flag_values = {":yydebug-rules": "fvf"})
config_setting(name = "yydebug-filter",
               flag_values = {":yydebug-rules": "filter"})
config_setting(name = "yydebug-build-filter",
               flag_values = {":yydebug-rules": "build-filter"})

## enable lexer debugging: --//bootstrap:lexdebug
bool_flag(name = "lexdebug", build_setting_default = 0)
config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

string_flag(name = "lexdebug-rules", build_setting_default = "")
config_setting(name = "lexdebug-version",
               flag_values = {":lexdebug-rules": "version"})
config_setting(name = "lexdebug-fpf",
               flag_values = {":lexdebug-rules": "fpf"})
config_setting(name = "lexdebug-fvf",
               flag_values = {":lexdebug-rules": "fvf"})
config_setting(name = "lexdebug-filter",
               flag_values = {":lexdebug-rules": "filter"})
config_setting(name = "lexdebug-build-filter",
               flag_values = {":lexdebug-rules": "build-filter"})
