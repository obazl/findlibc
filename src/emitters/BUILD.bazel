load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")
# load("@bazel_skylib//rules:copy_file.bzl", "copy_file")

load("@lemon//src:BUILD.bzl", "lemon")

load("//:BUILD.bzl",
     COPTS = "BASE_COPTS",
     DEFINES = "BASE_DEFINES",
     "DUNE_S7_VERSION",
     "LIBS7_VERSION",
     "LIBFINDLIB_VERSION",
     "LIBLOG_CC_VERSION",
     "UTHASH_VERSION")

exports_files(glob(["*.c"]))

cc_library(
    name = "build_bazel",
    srcs = [
        "emit_build_bazel.c", "emit_build_bazel.h",
        "//src:utils.c", "//src:utils.h"
    ],
    # }) + select({
    #     "//compilation_mode:dbg?": [
    #         "//src:debug.c", "//src/hdrs:debug.h",
    #         "debug_meta.c", "//src/hdrs:debug_meta.h",
    #         "debug_findlib.c", "//src/hdrs:debug_findlib.h"
    #     ],
    #     "//conditions:default": []
    # }),
    deps = [
        "//src:findlib",
        "@liblog_cc//src:logc",
        "@uthash//src:uthash",
    ],
    # ] + select({
    #     "//compilation_mode:dbg?": [
    #         "//src/debug"
    #     ],
    #     "//config/profile:dev?": [
    #         "//src/debug"
    #     ],
    #     "//conditions:default": []
    # }),
    copts = COPTS + [
        "-Isrc",
        "-I$(GENDIR)/src",

        "-Isrc",
        "-Iexternal/mibl/src",

        "-I$(GENDIR)/src/emitters",
        "-I$(GENDIR)/external/libfindlib~{}/src/emitters".format(
            LIBFINDLIB_VERSION),

        # "-Ivendored",
        # "-Iexternal/mibl/vendored",

        # "-Ivendored/mustach",
        # "-Iexternal/mibl/vendored/mustach",

        "-Iexternal/liblog_cc~{}/src".format(LIBLOG_CC_VERSION),
        "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),
    # ] + select({
    #     "//compilation_mode:dbg?": [
    #         "-Isrc/debug"
    #     ],
    #     "//config/profile:dev?": [
    #         "-Isrc/debug"
    #     ],
    #     "//conditions:default": []
    # }),
    ],
    local_defines = DEFINES + select({
        "//config/debug:debug?": ["DEVBUILD"],
        "//conditions:default":   []
    }) + select({
        "//config/debug:trace?": ["TRACING"],
        "//conditions:default":   []
    }),
    # data  = [
    #     "//coswitch/templates:ocaml_bigarray.BUILD",
    #     "//coswitch/templates:ocaml_c_api.BUILD",
    #     "//coswitch/templates:ocaml_compiler-libs.BUILD",
    #     "//coswitch/templates/compiler_libs:bytecomp.BUILD",
    #     "//coswitch/templates/compiler_libs:common.BUILD",
    #     "//coswitch/templates/compiler_libs:optcomp.BUILD",
    #     "//coswitch/templates/compiler_libs:toplevel.BUILD",
    #     "//coswitch/templates/compiler_libs:native_toplevel.BUILD",
    #     "//coswitch/templates:ocaml_dynlink.BUILD",
    #     "//coswitch/templates:ocaml_num.BUILD",
    #     "//coswitch/templates:ocaml_ocamldoc.BUILD",
    #     "//coswitch/templates:ocaml_runtime.BUILD",
    #     "//coswitch/templates:ocaml_stdlib.BUILD",
    #     "//coswitch/templates:ocaml_str.BUILD",

    #     "//coswitch/templates/platforms:BUILD.bazel",
    #     "//coswitch/templates/platforms/build:BUILD.bazel",
    #     "//coswitch/templates/platforms/target:BUILD.bazel",

    #     "//coswitch/templates:toolchain/adapters/local.BUILD",
    #     "//coswitch/templates:toolchain/adapters/local.BUILD.mustache",
    #     "//coswitch/templates:toolchain/adapters/linux/x86_64.BUILD",
    #     "//coswitch/templates:toolchain/adapters/linux/arm.BUILD",
    #     "//coswitch/templates:toolchain/adapters/macos/x86_64.BUILD",
    #     "//coswitch/templates:toolchain/adapters/macos/arm.BUILD",
    #     "//coswitch/templates:toolchain/profiles/profiles.BUILD",
    #     "//coswitch/templates:toolchain/selectors/local.BUILD",
    #     "//coswitch/templates:toolchain/selectors/linux/x86_64.BUILD",
    #     "//coswitch/templates:toolchain/selectors/linux/arm.BUILD",
    #     "//coswitch/templates:toolchain/selectors/macos/arm.BUILD",
    #     "//coswitch/templates:toolchain/selectors/macos/x86_64.BUILD",
    #     # "//coswitch/templates/host/bazel:BUILD.bazel",
    #     # "//coswitch/templates/host/build:BUILD.bazel",
    #     # "//coswitch/templates/host/target:BUILD.bazel",
    #     "//coswitch/templates:ocaml_threads.BUILD",
    #     "//coswitch/templates:ocaml_unix.BUILD",
    # ],
    # ] + select({
    #     "//compilation_mode:dbg?": ["//src:debug"],
    #     "//conditions:default": []
    # }),
    visibility = ["//visibility:public"]
)

cc_library(
    name = "jsoo",
    srcs = [
        "emit_jsoo.c", "emit_jsoo.h",
        "//src:utils.c", "//src:utils.h"
    ],
    # }) + select({
    #     "//compilation_mode:dbg?": [
    #         "//src:debug.c", "//src/hdrs:debug.h",
    #         "debug_meta.c", "//src/hdrs:debug_meta.h",
    #         "debug_findlib.c", "//src/hdrs:debug_findlib.h"
    #     ],
    #     "//conditions:default": []
    # }),
    deps = [
        "//src:findlib",
        "@liblog_cc//src:logc",
        "@uthash//src:uthash",
    ],
    # ] + select({
    #     "//compilation_mode:dbg?": [
    #         "//src/debug"
    #     ],
    #     "//config/profile:dev?": [
    #         "//src/debug"
    #     ],
    #     "//conditions:default": []
    # }),
    copts = COPTS + [
        "-Isrc",
        "-I$(GENDIR)/src",

        "-Isrc",
        "-Iexternal/mibl/src",

        "-I$(GENDIR)/src/emitters",
        "-I$(GENDIR)/external/libfindlib~{}/src/emitters".format(
            LIBFINDLIB_VERSION),

        # "-Ivendored",
        # "-Iexternal/mibl/vendored",

        # "-Ivendored/mustach",
        # "-Iexternal/mibl/vendored/mustach",

        "-Iexternal/liblog_cc~{}/src".format(LIBLOG_CC_VERSION),
        "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),
    # ] + select({
    #     "//compilation_mode:dbg?": [
    #         "-Isrc/debug"
    #     ],
    #     "//config/profile:dev?": [
    #         "-Isrc/debug"
    #     ],
    #     "//conditions:default": []
    # }),
    ],
    local_defines = DEFINES + select({
        "//config/debug:debug?": ["DEVBUILD"],
        "//conditions:default":   []
    }) + select({
        "//config/debug:trace?": ["TRACING"],
        "//conditions:default":   []
    }),
    visibility = ["//visibility:public"]
)

cc_library(
    name = "ocaml_repo",
    srcs = [
        "emit_ocaml_repo.c", "emit_ocaml_repo.h",
        "//src:utils.c", "//src:utils.h"
    ],
    # }) + select({
    #     "//compilation_mode:dbg?": [
    #         "//src:debug.c", "//src/hdrs:debug.h",
    #         "debug_meta.c", "//src/hdrs:debug_meta.h",
    #         "debug_findlib.c", "//src/hdrs:debug_findlib.h"
    #     ],
    #     "//conditions:default": []
    # }),
    deps = [
        "//src:findlib",
        "@liblog_cc//src:logc",
        "@uthash//src:uthash",
    ],
    # ] + select({
    #     "//compilation_mode:dbg?": [
    #         "//src/debug"
    #     ],
    #     "//config/profile:dev?": [
    #         "//src/debug"
    #     ],
    #     "//conditions:default": []
    # }),
    copts = COPTS + [
        "-Isrc",
        "-I$(GENDIR)/src",

        "-Isrc",
        "-Iexternal/mibl/src",

        "-I$(GENDIR)/src/emitters",
        "-I$(GENDIR)/external/libfindlib~{}/src/emitters".format(
            LIBFINDLIB_VERSION),

        # "-Ivendored",
        # "-Iexternal/mibl/vendored",

        # "-Ivendored/mustach",
        # "-Iexternal/mibl/vendored/mustach",

        "-Iexternal/liblog_cc~{}/src".format(LIBLOG_CC_VERSION),
        "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),
    # ] + select({
    #     "//compilation_mode:dbg?": [
    #         "-Isrc/debug"
    #     ],
    #     "//config/profile:dev?": [
    #         "-Isrc/debug"
    #     ],
    #     "//conditions:default": []
    # }),
    ],
    local_defines = DEFINES + select({
        "//config/debug:debug?": ["DEVBUILD"],
        "//conditions:default":   []
    }) + select({
        "//config/debug:trace?": ["TRACING"],
        "//conditions:default":   []
    }),
    # data  = [
    #     "//coswitch/templates:ocaml_bigarray.BUILD",
    #     "//coswitch/templates:ocaml_c_api.BUILD",
    #     "//coswitch/templates:ocaml_compiler-libs.BUILD",
    #     "//coswitch/templates/compiler_libs:bytecomp.BUILD",
    #     "//coswitch/templates/compiler_libs:common.BUILD",
    #     "//coswitch/templates/compiler_libs:optcomp.BUILD",
    #     "//coswitch/templates/compiler_libs:toplevel.BUILD",
    #     "//coswitch/templates/compiler_libs:native_toplevel.BUILD",
    #     "//coswitch/templates:ocaml_dynlink.BUILD",
    #     "//coswitch/templates:ocaml_num.BUILD",
    #     "//coswitch/templates:ocaml_ocamldoc.BUILD",
    #     "//coswitch/templates:ocaml_runtime.BUILD",
    #     "//coswitch/templates:ocaml_stdlib.BUILD",
    #     "//coswitch/templates:ocaml_str.BUILD",

    #     "//coswitch/templates/platforms:BUILD.bazel",
    #     "//coswitch/templates/platforms/build:BUILD.bazel",
    #     "//coswitch/templates/platforms/target:BUILD.bazel",

    #     "//coswitch/templates:toolchain/adapters/local.BUILD",
    #     "//coswitch/templates:toolchain/adapters/local.BUILD.mustache",
    #     "//coswitch/templates:toolchain/adapters/linux/x86_64.BUILD",
    #     "//coswitch/templates:toolchain/adapters/linux/arm.BUILD",
    #     "//coswitch/templates:toolchain/adapters/macos/x86_64.BUILD",
    #     "//coswitch/templates:toolchain/adapters/macos/arm.BUILD",
    #     "//coswitch/templates:toolchain/profiles/profiles.BUILD",
    #     "//coswitch/templates:toolchain/selectors/local.BUILD",
    #     "//coswitch/templates:toolchain/selectors/linux/x86_64.BUILD",
    #     "//coswitch/templates:toolchain/selectors/linux/arm.BUILD",
    #     "//coswitch/templates:toolchain/selectors/macos/arm.BUILD",
    #     "//coswitch/templates:toolchain/selectors/macos/x86_64.BUILD",
    #     # "//coswitch/templates/host/bazel:BUILD.bazel",
    #     # "//coswitch/templates/host/build:BUILD.bazel",
    #     # "//coswitch/templates/host/target:BUILD.bazel",
    #     "//coswitch/templates:ocaml_threads.BUILD",
    #     "//coswitch/templates:ocaml_unix.BUILD",
    # ],
    # ] + select({
    #     "//compilation_mode:dbg?": ["//src:debug"],
    #     "//conditions:default": []
    # }),
    visibility = ["//visibility:public"]
)

# emit_pkg_bindir called by coswitch converter/extender
# reads the dune-package file to get list of executables,
# so depends on @dune_s7, which must be initialized, etc.
cc_library(
    name = "pkg_bindir",
    srcs = [
        "emit_pkg_bindir.c", "emit_pkg_bindir.h",
        "//src:utils.c", "//src:utils.h"
    ],
    # }) + select({
    #     "//compilation_mode:dbg?": [
    #         "//src:debug.c", "//src/hdrs:debug.h",
    #         "debug_meta.c", "//src/hdrs:debug_meta.h",
    #         "debug_findlib.c", "//src/hdrs:debug_findlib.h"
    #     ],
    #     "//conditions:default": []
    # }),
    deps = [
        "@liblog_cc//src:logc",
        "@uthash//src:uthash",
        "@dune_s7//src:dune_s7",
        "//src:findlib",
    ],
    # ] + select({
    #     "//compilation_mode:dbg?": [
    #         "//src/debug"
    #     ],
    #     "//config/profile:dev?": [
    #         "//src/debug"
    #     ],
    #     "//conditions:default": []
    # }),
    copts = COPTS + [
        "-Isrc",
        "-I$(GENDIR)/src",

        "-Isrc",
        "-Iexternal/mibl/src",

        "-I$(GENDIR)/src/emitters",
        "-I$(GENDIR)/external/libfindlib~{}/src/emitters".format(
            LIBFINDLIB_VERSION),

        # "-Ivendored",
        # "-Iexternal/mibl/vendored",

        # "-Ivendored/mustach",
        # "-Iexternal/mibl/vendored/mustach",

        "-Iexternal/libs7~{}/src".format(LIBS7_VERSION),
        "-Iexternal/dune_s7~{}/src".format(DUNE_S7_VERSION),
        "-Iexternal/liblog_cc~{}/src".format(LIBLOG_CC_VERSION),
        "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),
    # ] + select({
    #     "//compilation_mode:dbg?": [
    #         "-Isrc/debug"
    #     ],
    #     "//config/profile:dev?": [
    #         "-Isrc/debug"
    #     ],
    #     "//conditions:default": []
    # }),
    ],
    local_defines = DEFINES + select({
        "//config/debug:debug?": ["DEVBUILD"],
        "//conditions:default":   []
    }) + select({
        "//config/debug:trace?": ["TRACING"],
        "//conditions:default":   []
    }),
    # data  = [
    #     "//coswitch/templates:ocaml_bigarray.BUILD",
    #     "//coswitch/templates:ocaml_c_api.BUILD",
    #     "//coswitch/templates:ocaml_compiler-libs.BUILD",
    #     "//coswitch/templates/compiler_libs:bytecomp.BUILD",
    #     "//coswitch/templates/compiler_libs:common.BUILD",
    #     "//coswitch/templates/compiler_libs:optcomp.BUILD",
    #     "//coswitch/templates/compiler_libs:toplevel.BUILD",
    #     "//coswitch/templates/compiler_libs:native_toplevel.BUILD",
    #     "//coswitch/templates:ocaml_dynlink.BUILD",
    #     "//coswitch/templates:ocaml_num.BUILD",
    #     "//coswitch/templates:ocaml_ocamldoc.BUILD",
    #     "//coswitch/templates:ocaml_runtime.BUILD",
    #     "//coswitch/templates:ocaml_stdlib.BUILD",
    #     "//coswitch/templates:ocaml_str.BUILD",

    #     "//coswitch/templates/platforms:BUILD.bazel",
    #     "//coswitch/templates/platforms/build:BUILD.bazel",
    #     "//coswitch/templates/platforms/target:BUILD.bazel",

    #     "//coswitch/templates:toolchain/adapters/local.BUILD",
    #     "//coswitch/templates:toolchain/adapters/local.BUILD.mustache",
    #     "//coswitch/templates:toolchain/adapters/linux/x86_64.BUILD",
    #     "//coswitch/templates:toolchain/adapters/linux/arm.BUILD",
    #     "//coswitch/templates:toolchain/adapters/macos/x86_64.BUILD",
    #     "//coswitch/templates:toolchain/adapters/macos/arm.BUILD",
    #     "//coswitch/templates:toolchain/profiles/profiles.BUILD",
    #     "//coswitch/templates:toolchain/selectors/local.BUILD",
    #     "//coswitch/templates:toolchain/selectors/linux/x86_64.BUILD",
    #     "//coswitch/templates:toolchain/selectors/linux/arm.BUILD",
    #     "//coswitch/templates:toolchain/selectors/macos/arm.BUILD",
    #     "//coswitch/templates:toolchain/selectors/macos/x86_64.BUILD",
    #     # "//coswitch/templates/host/bazel:BUILD.bazel",
    #     # "//coswitch/templates/host/build:BUILD.bazel",
    #     # "//coswitch/templates/host/target:BUILD.bazel",
    #     "//coswitch/templates:ocaml_threads.BUILD",
    #     "//coswitch/templates:ocaml_unix.BUILD",
    # ],
    # ] + select({
    #     "//compilation_mode:dbg?": ["//src:debug"],
    #     "//conditions:default": []
    # }),
    visibility = ["//visibility:public"]
)

genrule(
    name = "mkhdrs",
    srcs = [
        "emit_build_bazel.c",
        "emit_jsoo.c",
        "emit_ocaml_repo.c",
        "emit_pkg_bindir.c"
    ],
    outs = [
        "emit_build_bazel.h",
        "emit_jsoo.h",
        "emit_ocaml_repo.h",
        "emit_pkg_bindir.h"
    ],
    cmd = " ".join([
        "SRC1=$(location emit_build_bazel.c);",
        "SRCDIR1=`dirname $$SRC1`;",
        "$(execpath @makeheaders//src:makeheaders)",
        "$(location emit_build_bazel.c)",
        "$(location emit_jsoo.c)",
        "$(location emit_ocaml_repo.c)",
        "$(location emit_pkg_bindir.c);",
        "cp $${SRCDIR1}/*.h $(@D)",
        # "> $@",
    ]),
    tools = ["@makeheaders//src:makeheaders"],
    visibility = ["//visibility:public"]
)
